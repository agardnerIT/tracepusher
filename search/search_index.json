{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenTelemetry tracepusher Trace anything with OpenTelemetry! Generate and push OpenTelemetry Trace data to an endpoint in JSON format. Watch: Tracepusher in Action Want to do a similar thing with logs? Check out logpusher . Uses DevTools .har file to OpenTelemetry Converter Trace Kubernetes Jobs and CronJobs with OpenTelemetry Trace CICD Pipelines with OpenTelemetry Trace shell scripts with OpenTelemetry Trace Helm with tracepusher Use tracepusher in a CICD system Logs to traces: Trace GitHub Codespace Creation Trace anything with OpenTelemetry Try tracepusher See try tracepusher Quick Start Tracepusher is available as: Standalone binaries Python script Docker image Kubernetes Operator Download the binary from the releases page then run: ./tracepusher --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name span_name \\ --duration SPAN_TIME_IN_SECONDS Advanced Usage See the following pages for advanced usage and reference information for the flags: Standalone binary usage Docker usage Python usage CI system usage Complex (Multi Span) Traces Span time shifting Span attributes and span attribute types Span events Span status Insecure flag Start time flag tracepusher flag reference pages","title":"Home"},{"location":"#opentelemetry-tracepusher","text":"Trace anything with OpenTelemetry! Generate and push OpenTelemetry Trace data to an endpoint in JSON format.","title":"OpenTelemetry tracepusher"},{"location":"#watch-tracepusher-in-action","text":"Want to do a similar thing with logs? Check out logpusher .","title":"Watch: Tracepusher in Action"},{"location":"#uses","text":"DevTools .har file to OpenTelemetry Converter Trace Kubernetes Jobs and CronJobs with OpenTelemetry Trace CICD Pipelines with OpenTelemetry Trace shell scripts with OpenTelemetry Trace Helm with tracepusher Use tracepusher in a CICD system Logs to traces: Trace GitHub Codespace Creation Trace anything with OpenTelemetry","title":"Uses"},{"location":"#try-tracepusher","text":"See try tracepusher","title":"Try tracepusher"},{"location":"#quick-start","text":"Tracepusher is available as: Standalone binaries Python script Docker image Kubernetes Operator Download the binary from the releases page then run: ./tracepusher --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name span_name \\ --duration SPAN_TIME_IN_SECONDS","title":"Quick Start"},{"location":"#advanced-usage","text":"See the following pages for advanced usage and reference information for the flags: Standalone binary usage Docker usage Python usage CI system usage Complex (Multi Span) Traces Span time shifting Span attributes and span attribute types Span events Span status Insecure flag Start time flag tracepusher flag reference pages","title":"Advanced Usage"},{"location":"adopters/","text":"Do you use tracepusher? Thanks! We'd love to know. Add your details to ADOPTERS.md","title":"Adopters"},{"location":"breaking-changes/","text":"v0.3.0 to v0.4.0 Argument handling was entirely re-written for v0.4.0 and tracepusher expects different arguments for v0.3.0 and v0.4.0 . Here is the readme for v0.3.0 .","title":"Breaking changes"},{"location":"breaking-changes/#v030-to-v040","text":"Argument handling was entirely re-written for v0.4.0 and tracepusher expects different arguments for v0.3.0 and v0.4.0 . Here is the readme for v0.3.0 .","title":"v0.3.0 to v0.4.0"},{"location":"faq/","text":"Why Does This Exist? Why, when tracegen and the replacement telemetrygen exist, does this exist? This tool does not replace or supercede those tools in any way. For lots of usecases and people, those tools will be better. However, they hide the inner-workings (the how ). For someone getting started or wanting to truly understand what is happening, there is \"too much magic\". Stuff \"just works\" whereas tracepusher is more explicit - and thus (I believe) easier to see how the pieces fit together. The trace data that tracepusher generates is also customisable whereas \"you get what you get\" with tracegen / telemetrygen .","title":"FAQ"},{"location":"faq/#why-does-this-exist","text":"Why, when tracegen and the replacement telemetrygen exist, does this exist? This tool does not replace or supercede those tools in any way. For lots of usecases and people, those tools will be better. However, they hide the inner-workings (the how ). For someone getting started or wanting to truly understand what is happening, there is \"too much magic\". Stuff \"just works\" whereas tracepusher is more explicit - and thus (I believe) easier to see how the pieces fit together. The trace data that tracepusher generates is also customisable whereas \"you get what you get\" with tracegen / telemetrygen .","title":"Why Does This Exist?"},{"location":"try/","text":"Try Tracepusher without Installation Try tracepusher from your browser, with nothing to install. tracepusher with open source software (Jaeger) tracepusher with Dynatrace Use tracepusher tracepusher can downloaded as a standalone binary , as a docker image , CI-ready docker image or Python script .","title":"Try tracepusher"},{"location":"try/#try-tracepusher-without-installation","text":"Try tracepusher from your browser, with nothing to install. tracepusher with open source software (Jaeger) tracepusher with Dynatrace","title":"Try Tracepusher without Installation"},{"location":"try/#use-tracepusher","text":"tracepusher can downloaded as a standalone binary , as a docker image , CI-ready docker image or Python script .","title":"Use tracepusher"},{"location":"reference/","text":"Technical Reference Pages Advances Usecases Complex (Multi Span) Traces OpenTelemetry Collector Configuration Flags Reference Debug Mode Flag Dry Run Flag Span Attribute Types Time Shifting Span Events Span Kind Span Durations and Duration Types Span Status Insecure flag Start Time flag","title":"Reference Pages"},{"location":"reference/#technical-reference-pages","text":"","title":"Technical Reference Pages"},{"location":"reference/#advances-usecases","text":"Complex (Multi Span) Traces OpenTelemetry Collector Configuration","title":"Advances Usecases"},{"location":"reference/#flags-reference","text":"Debug Mode Flag Dry Run Flag Span Attribute Types Time Shifting Span Events Span Kind Span Durations and Duration Types Span Status Insecure flag Start Time flag","title":"Flags Reference"},{"location":"reference/debug-mode/","text":"Debug Mode Add -x true or --debug true for extra output","title":"Debug mode"},{"location":"reference/debug-mode/#debug-mode","text":"Add -x true or --debug true for extra output","title":"Debug Mode"},{"location":"reference/dry-run-mode/","text":"Dry Run Mode Add --dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry run mode"},{"location":"reference/dry-run-mode/#dry-run-mode","text":"Add --dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry Run Mode"},{"location":"reference/duration-type/","text":"Span Duration and Duration Type The optional flag -dt or --duration-type allows users to specify the span duration type. If not specified, tracepusher generates spans of a duration type in seconds . Using the above parameter, a user can override this. Valid Span Duration Types s : seconds (default) ms Examples Generate a 2 second long span: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 equivalent to: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --duration-type s Generate a span of 1234 milliseconds: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 1234 \\ --duration-type ms","title":"Duration type"},{"location":"reference/duration-type/#span-duration-and-duration-type","text":"The optional flag -dt or --duration-type allows users to specify the span duration type. If not specified, tracepusher generates spans of a duration type in seconds . Using the above parameter, a user can override this.","title":"Span Duration and Duration Type"},{"location":"reference/duration-type/#valid-span-duration-types","text":"s : seconds (default) ms","title":"Valid Span Duration Types"},{"location":"reference/duration-type/#examples","text":"Generate a 2 second long span: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 equivalent to: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --duration-type s Generate a span of 1234 milliseconds: ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 1234 \\ --duration-type ms","title":"Examples"},{"location":"reference/insecure-flag/","text":"Insecure Flag Introduced in v0.9.0 Default: false The optional -insec [false|true] or --insecure [false|true] flag exists to encourage \"secure by default\" practices by encouraging the sending of span only to https:// endpoints. However, tracepusher does still work with http:// endpoints. The --insecure flag affects whether or not tracepusher will connect to insecure http:// endpoints or not. The --insecure flag operation differs by version. v0.8.* The --insecure is not available v0.9.* The --insecure flag defaults to false with the intention of meaning insecure endpoints are not allowed. However, to provide ample migration time for end users, the behaviour is as follows: --insecure flag is omitted This is the expected behaviour of everyone migrating from v0.8 to v0.9. The flag defaults to false BUT will still allow http:// endpoints, just like before. Tracepusher will emit a soft WARNING message to inform users of the upcoming breaking change, like this: WARN: --insecure flag is omitted or is set to false. Prior to v1.0 tracepusher still works as expected (span is sent). In v1.0 and above, you MUST set '--insecure true' if you want to send to an http:// endpoint. See https://github.com/agardnerIT/tracepusher/issues/78 --insecure flag is explicitly set to false From v0.9 upwards, users are encouraged to get into the best practice habit of explicitly setting this to false or true . Otherwise, for v0.9.*, the behaviour is as above. v1.0 If the --insecure flag is omitted or explicitly set to false , calls to http:// endpoints will be BLOCKED . Calls to http:// endpoints MUST be accompanied with the --insecure true flag or calls will be blocked with this error: ERROR: Endpoint is http:// (insecure). You MUST set '--insecure true'. Span has NOT been sent.","title":"Insecure flag"},{"location":"reference/insecure-flag/#insecure-flag","text":"Introduced in v0.9.0 Default: false The optional -insec [false|true] or --insecure [false|true] flag exists to encourage \"secure by default\" practices by encouraging the sending of span only to https:// endpoints. However, tracepusher does still work with http:// endpoints. The --insecure flag affects whether or not tracepusher will connect to insecure http:// endpoints or not. The --insecure flag operation differs by version.","title":"Insecure Flag"},{"location":"reference/insecure-flag/#v08","text":"The --insecure is not available","title":"v0.8.*"},{"location":"reference/insecure-flag/#v09","text":"The --insecure flag defaults to false with the intention of meaning insecure endpoints are not allowed. However, to provide ample migration time for end users, the behaviour is as follows:","title":"v0.9.*"},{"location":"reference/insecure-flag/#-insecure-flag-is-omitted","text":"This is the expected behaviour of everyone migrating from v0.8 to v0.9. The flag defaults to false BUT will still allow http:// endpoints, just like before. Tracepusher will emit a soft WARNING message to inform users of the upcoming breaking change, like this: WARN: --insecure flag is omitted or is set to false. Prior to v1.0 tracepusher still works as expected (span is sent). In v1.0 and above, you MUST set '--insecure true' if you want to send to an http:// endpoint. See https://github.com/agardnerIT/tracepusher/issues/78","title":"--insecure flag is omitted"},{"location":"reference/insecure-flag/#-insecure-flag-is-explicitly-set-to-false","text":"From v0.9 upwards, users are encouraged to get into the best practice habit of explicitly setting this to false or true . Otherwise, for v0.9.*, the behaviour is as above.","title":"--insecure flag is explicitly set to false"},{"location":"reference/insecure-flag/#v10","text":"If the --insecure flag is omitted or explicitly set to false , calls to http:// endpoints will be BLOCKED . Calls to http:// endpoints MUST be accompanied with the --insecure true flag or calls will be blocked with this error: ERROR: Endpoint is http:// (insecure). You MUST set '--insecure true'. Span has NOT been sent.","title":"v1.0"},{"location":"reference/multi-span-traces/","text":"TLDR: Prefer to read code? See the GitLab sample pipeline for a working example. tracepusher v0.5.0 and above supports tracing any arbitrarily complex multi-span trace. It does so by allowing users to generate and pass in their own trace-id and span-id . Consider the following batch script: #!/bin/bash main_time_start=0 counter=1 limit=5 while [ $counter -le $limit ] do echo \"in a loop. interation ${counter}\" # 1, 2, 3, 4, 5 done main_time_end=$SECONDS duration=$(( main_time_end - main_time_start )) As a trace, this would be represented as 1 parent span (that lasts for 5 seconds). \"Inside\" that parent span would be 5 sub spans, each denoting \"once around the loop\". In the default mode, tracepusher will auto-generate trace and span IDs but you can generate your own and pass them in. For example: # trace_id is 32 digits # span_id is 16 trace_id=$(openssl rand -hex 16) span_id=$(openssl rand -hex 8) The parent span would look like the following. Notice the --time-shift=true parameter is set. If this was not set, the timings would not make sense. For more information, see time shifting Parent Span Example python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name \"serviceA\" \\ --span-name \"main_span\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --span-id ${span_id} \\ --time-shift True Sub Span Example # Note: subspan time is tracked independently to \"main\" span time while [ $counter -lt $limit ] do # Calculate unique ID for this span sub_span_id=$(openssl rand -hex 8) sub_span_time_start=$SECONDS # Do real work here... sleep 1 subspan_time_end=$SECONDS duration=$$(( $time_end - $time_start )) counter=$(( $counter + 1 )) python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name \"subspan${counter}\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --parent-span-id ${span_id} \\ --span-id ${subspan_id} \\ --time-shift True done","title":"Multi Span Traces"},{"location":"reference/multi-span-traces/#parent-span-example","text":"python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name \"serviceA\" \\ --span-name \"main_span\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --span-id ${span_id} \\ --time-shift True","title":"Parent Span Example"},{"location":"reference/multi-span-traces/#sub-span-example","text":"# Note: subspan time is tracked independently to \"main\" span time while [ $counter -lt $limit ] do # Calculate unique ID for this span sub_span_id=$(openssl rand -hex 8) sub_span_time_start=$SECONDS # Do real work here... sleep 1 subspan_time_end=$SECONDS duration=$$(( $time_end - $time_start )) counter=$(( $counter + 1 )) python3 tracepusher.py \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name \"subspan${counter}\" \\ --duration ${duration} \\ --trace-id ${trace_id} \\ --parent-span-id ${span_id} \\ --span-id ${subspan_id} \\ --time-shift True done","title":"Sub Span Example"},{"location":"reference/otel-col/","text":"This page shows sample configuration and instructions for creating an OpenTelemetry Collector. Specifically, the config.yaml shows how to send traces to Dynatrace as a backend. If you need Dynatrace tenant, click here to signup for a free trial . Download Collector The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe ) Create config.yaml The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: processors: batch: send_batch_max_size: 1000 timeout: 30s send_batch_size : 800 memory_limiter: check_interval: 1s limit_percentage: 70 spike_limit_percentage: 30 exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: traces: receivers: [otlp] processors: [batch] exporters: [otlphttp,logging] metrics: receivers: [otlp] processors: [memory_limiter,batch] exporters: [otlphttp] Start The Collector Open a command / terminal window and run: otelcol.exe --config config.yaml Then run tracepusher: python tracepusher.py --endpoint http://localhost:4318 --service-name tracepusher --span-name my-span --duration 2","title":"Otel col"},{"location":"reference/otel-col/#download-collector","text":"The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe )","title":"Download Collector"},{"location":"reference/otel-col/#create-configyaml","text":"The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: processors: batch: send_batch_max_size: 1000 timeout: 30s send_batch_size : 800 memory_limiter: check_interval: 1s limit_percentage: 70 spike_limit_percentage: 30 exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: traces: receivers: [otlp] processors: [batch] exporters: [otlphttp,logging] metrics: receivers: [otlp] processors: [memory_limiter,batch] exporters: [otlphttp]","title":"Create config.yaml"},{"location":"reference/otel-col/#start-the-collector","text":"Open a command / terminal window and run: otelcol.exe --config config.yaml Then run tracepusher: python tracepusher.py --endpoint http://localhost:4318 --service-name tracepusher --span-name my-span --duration 2","title":"Start The Collector"},{"location":"reference/span-attribute-types/","text":"Span Attribute Types The optional -spnattrs or equivalent long form version: --span-attributes exists to add span attributes to the spans that tracepusher creates. Add as many attributes as you like. Formatting Span Attributes Tracepusher will accept two possible inputs: --span-attributes foo=bar --span-attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-attributes foo=bar foo2=23=intValue docker run gardnera/tracepusher:v0.8.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnattrs foo=bar foo2=bar2=stringValue Valid Types The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Span attribute types"},{"location":"reference/span-attribute-types/#span-attribute-types","text":"The optional -spnattrs or equivalent long form version: --span-attributes exists to add span attributes to the spans that tracepusher creates. Add as many attributes as you like.","title":"Span Attribute Types"},{"location":"reference/span-attribute-types/#formatting-span-attributes","text":"Tracepusher will accept two possible inputs: --span-attributes foo=bar --span-attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-attributes foo=bar foo2=23=intValue docker run gardnera/tracepusher:v0.8.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnattrs foo=bar foo2=bar2=stringValue","title":"Formatting Span Attributes"},{"location":"reference/span-attribute-types/#valid-types","text":"The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Valid Types"},{"location":"reference/span-events/","text":"Span Events The optional -spnevnts or equivalent long form version: --span-events exists to add span events to the spans that tracepusher creates. Add as many events as you like. Formatting Span Events Span events are formatted as follows. The first 4 parameters are mandatory. The fifth is optional. <eventTimeOffsetInMillisFromSpanStartTime>=<eventName>=<eventKey>=<eventValue> In the first, the value is assumed to be of type stringValue . or <eventTimeOffsetInMillisFromSpanStartTime>=<eventName>=<eventKey>=<eventValue>=<eventValueType> For example, to push an event that should be denoted at 100 milliseconds after the span start time, where the event name is eventA , the key is feature_flag.key , the value is hexColor and the event value type (implied) is stringValue : ./tracepusher \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name span1 \\ --duration 2 \\ --span-events 0=eventA=feature_flag.key=hexColor To send an event that should be attached at the beginning of the span, with a key of userID and a type set as an integer: ./tracepusher \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name span1 \\ --duration 2 \\ --span-events 0=eventA=userID=23=intValue Tracepusher will accept two possible inputs: --span-events 0=eventName=key=vaue --span-events 0=eventName=key=value=<TYPE> Send Multiple Span Events Separate each event with a space. ./tracepusher \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-events 0=eventA=foo=bar 0=eventA=userID=23=intValue ./tracepusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnevnts 0=eventA=foo=bar 0=eventA=userID=23=intValue Valid Types The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Span events"},{"location":"reference/span-events/#span-events","text":"The optional -spnevnts or equivalent long form version: --span-events exists to add span events to the spans that tracepusher creates. Add as many events as you like.","title":"Span Events"},{"location":"reference/span-events/#formatting-span-events","text":"Span events are formatted as follows. The first 4 parameters are mandatory. The fifth is optional. <eventTimeOffsetInMillisFromSpanStartTime>=<eventName>=<eventKey>=<eventValue> In the first, the value is assumed to be of type stringValue . or <eventTimeOffsetInMillisFromSpanStartTime>=<eventName>=<eventKey>=<eventValue>=<eventValueType> For example, to push an event that should be denoted at 100 milliseconds after the span start time, where the event name is eventA , the key is feature_flag.key , the value is hexColor and the event value type (implied) is stringValue : ./tracepusher \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name span1 \\ --duration 2 \\ --span-events 0=eventA=feature_flag.key=hexColor To send an event that should be attached at the beginning of the span, with a key of userID and a type set as an integer: ./tracepusher \\ --endpoint http://localhost:4318 \\ --service-name serviceA \\ --span-name span1 \\ --duration 2 \\ --span-events 0=eventA=userID=23=intValue Tracepusher will accept two possible inputs: --span-events 0=eventName=key=vaue --span-events 0=eventName=key=value=<TYPE>","title":"Formatting Span Events"},{"location":"reference/span-events/#send-multiple-span-events","text":"Separate each event with a space. ./tracepusher \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 --service-name service_name \\ --span-name spanA \\ --duration 2 \\ --span-events 0=eventA=foo=bar 0=eventA=userID=23=intValue ./tracepusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS \\ -spnevnts 0=eventA=foo=bar 0=eventA=userID=23=intValue","title":"Send Multiple Span Events"},{"location":"reference/span-events/#valid-types","text":"The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Valid Types"},{"location":"reference/span-kind/","text":"Span Kind The optional flag -sk or --span-kind allows users to specify the span kind. If not specified, tracepusher generates INTERNAL type spans. But using the above parameter, a user can override this. Valid Span Types UNSPECIFIED (tracepusher automatically transforms this to INTERNAL as per the spec) INTERNAL (default) CLIENT SERVER CONSUMER PRODUCER Example ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-kind CONSUMER","title":"Span kind"},{"location":"reference/span-kind/#span-kind","text":"The optional flag -sk or --span-kind allows users to specify the span kind. If not specified, tracepusher generates INTERNAL type spans. But using the above parameter, a user can override this.","title":"Span Kind"},{"location":"reference/span-kind/#valid-span-types","text":"UNSPECIFIED (tracepusher automatically transforms this to INTERNAL as per the spec) INTERNAL (default) CLIENT SERVER CONSUMER PRODUCER","title":"Valid Span Types"},{"location":"reference/span-kind/#example","text":"./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-kind CONSUMER","title":"Example"},{"location":"reference/span-status/","text":"Span Status The optional flag -ss or --span-status allows users to specify the span status. If not specified, tracepusher assumes an OK status. For reference, these map to values of 0 (Unset), 1 (OK) or 2 (Error) according to the OpenTelemetry specification . Valid Span Statuses These are case insensitive: OK (default) ERROR UNSET (if you use anything other than \"OK\" or \"ERROR\") Examples Defaults to OK ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 Explicitly set to OK ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status OK Explicitly set to Error ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status ERROR Invalid value (defaults to Unset) ./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status ABC123","title":"Span status"},{"location":"reference/span-status/#span-status","text":"The optional flag -ss or --span-status allows users to specify the span status. If not specified, tracepusher assumes an OK status. For reference, these map to values of 0 (Unset), 1 (OK) or 2 (Error) according to the OpenTelemetry specification .","title":"Span Status"},{"location":"reference/span-status/#valid-span-statuses","text":"These are case insensitive: OK (default) ERROR UNSET (if you use anything other than \"OK\" or \"ERROR\")","title":"Valid Span Statuses"},{"location":"reference/span-status/#examples","text":"","title":"Examples"},{"location":"reference/span-status/#defaults-to-ok","text":"./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2","title":"Defaults to OK"},{"location":"reference/span-status/#explicitly-set-to-ok","text":"./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status OK","title":"Explicitly set to OK"},{"location":"reference/span-status/#explicitly-set-to-error","text":"./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status ERROR","title":"Explicitly set to Error"},{"location":"reference/span-status/#invalid-value-defaults-to-unset","text":"./tracepusher \\ -ep http://localhost:4318 \\ -sen serviceA \\ -spn span1 \\ -dur 2 \\ --span-status ABC123","title":"Invalid value (defaults to Unset)"},{"location":"reference/start-time/","text":"Start Time Introduced in v0.10.0 The optional flag -st or --start-time allows users to specify the span start time. If not specified, tracepusher assumes a start time of now . The two valid formats are: 1) A 19 digit string representing milliseconds since the epoch: eg. 1700967916494000000 2) \"%Y-%m-%dT%H:%M:%S.%fZ\" eg. \"2023-11-26T03:05:16.844Z\" Example 1: Unix timestamp ./tracepusher \\ --endpoint http://localhost:4318 \\ --span-name spanOne \\ --service-name serviceOne \\ --duration 2 \\ --duration-type s \\ --start-time 1700967916494000000 Example 2: DateTime Format ./tracepusher \\ --endpoint http://localhost:4318 \\ --span-name spanOne \\ --service-name serviceOne \\ --duration 2 \\ --duration-type s \\ --start-time 2023-11-26T03:05:16.844Z","title":"Start time"},{"location":"reference/start-time/#start-time","text":"Introduced in v0.10.0 The optional flag -st or --start-time allows users to specify the span start time. If not specified, tracepusher assumes a start time of now . The two valid formats are: 1) A 19 digit string representing milliseconds since the epoch: eg. 1700967916494000000 2) \"%Y-%m-%dT%H:%M:%S.%fZ\" eg. \"2023-11-26T03:05:16.844Z\"","title":"Start Time"},{"location":"reference/start-time/#example-1-unix-timestamp","text":"./tracepusher \\ --endpoint http://localhost:4318 \\ --span-name spanOne \\ --service-name serviceOne \\ --duration 2 \\ --duration-type s \\ --start-time 1700967916494000000","title":"Example 1: Unix timestamp"},{"location":"reference/start-time/#example-2-datetime-format","text":"./tracepusher \\ --endpoint http://localhost:4318 \\ --span-name spanOne \\ --service-name serviceOne \\ --duration 2 \\ --duration-type s \\ --start-time 2023-11-26T03:05:16.844Z","title":"Example 2: DateTime Format"},{"location":"reference/time-shifting/","text":"Time Shifting In \"default mode\" tracepusher starts a trace now and finishes it SPAN_TIME_IN_SECONDS in the future. You may want to push timings for traces that have already occurred (eg. shell scripts). See https://github.com/agardnerIT/tracepusher/issues/4. --time-shift true means start and end times will be shifted back by whatever is specified as the --duration .","title":"Time shifting"},{"location":"reference/time-shifting/#time-shifting","text":"In \"default mode\" tracepusher starts a trace now and finishes it SPAN_TIME_IN_SECONDS in the future. You may want to push timings for traces that have already occurred (eg. shell scripts). See https://github.com/agardnerIT/tracepusher/issues/4. --time-shift true means start and end times will be shifted back by whatever is specified as the --duration .","title":"Time Shifting"},{"location":"usage/","text":"Use tracepusher in various contexts Trace Kubernetes Jobs and CronJobs See trace Kubernetes Jobs and Cronjobs for more information. Standalone Binary For most, this will be the preferred way to run tracepusher. Download the relevant binary from the releases page on GitHub and execute. See run tracepusher as a standalone binary for more information. Docker Use tracepusher as a Docker image Docker CI-ready Image tracepusher inside a Docker image w/ extra tools (eg. openssl). Useful for running CI pipelines in container images. Python Run tracepusher as a Python script . HAR File to OpenTelemetry Converter This utility takes a .har file (HTTP Archive) as input, converts to OpenTelemetry and sends to the collector. Go here for the HAR file to OpenTelemetry converter","title":"Usage"},{"location":"usage/#use-tracepusher-in-various-contexts","text":"","title":"Use tracepusher in various contexts"},{"location":"usage/#trace-kubernetes-jobs-and-cronjobs","text":"See trace Kubernetes Jobs and Cronjobs for more information.","title":"Trace Kubernetes Jobs and CronJobs"},{"location":"usage/#standalone-binary","text":"For most, this will be the preferred way to run tracepusher. Download the relevant binary from the releases page on GitHub and execute. See run tracepusher as a standalone binary for more information.","title":"Standalone Binary"},{"location":"usage/#docker","text":"Use tracepusher as a Docker image","title":"Docker"},{"location":"usage/#docker-ci-ready-image","text":"tracepusher inside a Docker image w/ extra tools (eg. openssl). Useful for running CI pipelines in container images.","title":"Docker CI-ready Image"},{"location":"usage/#python","text":"Run tracepusher as a Python script .","title":"Python"},{"location":"usage/#har-file-to-opentelemetry-converter","text":"This utility takes a .har file (HTTP Archive) as input, converts to OpenTelemetry and sends to the collector. Go here for the HAR file to OpenTelemetry converter","title":"HAR File to OpenTelemetry Converter"},{"location":"usage/ci/","text":"tracepusher CI-ready image \u2139\ufe0f v0.8.0 and above have standalone, platform-specific binaries which are probably easier to use and better suited to this usecase. We suggest trying the standalone binary (attached to every GitHub release) first - before using this docker image. We would love your feedback as we consider retiring this -ci image in future. The gardnera/tracepusher:v0.8.0-ci image is CI ready. This containers drops you into a normal shell where you have access to various tools like openssl (for generating UUIDs). Tracepusher can be executed using Python from within this container. See Python usage instructions for more info. Example: Tracing GitLab pipelines See Tracing GitLab pipelines with tracepusher on YouTube for a walkthrough and get started with the sample script .","title":"Usage > CI"},{"location":"usage/ci/#tracepusher-ci-ready-image","text":"\u2139\ufe0f v0.8.0 and above have standalone, platform-specific binaries which are probably easier to use and better suited to this usecase. We suggest trying the standalone binary (attached to every GitHub release) first - before using this docker image. We would love your feedback as we consider retiring this -ci image in future. The gardnera/tracepusher:v0.8.0-ci image is CI ready. This containers drops you into a normal shell where you have access to various tools like openssl (for generating UUIDs). Tracepusher can be executed using Python from within this container. See Python usage instructions for more info.","title":"tracepusher CI-ready image"},{"location":"usage/ci/#example-tracing-gitlab-pipelines","text":"See Tracing GitLab pipelines with tracepusher on YouTube for a walkthrough and get started with the sample script .","title":"Example: Tracing GitLab pipelines"},{"location":"usage/docker/","text":"Requirements and Prequisites A running OpenTelemetry collector Docker Basic Docker Usage docker run gardnera/tracepusher:v0.8.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS Optional Parameters --duration-type ms|s (defaults to `s` > seconds) --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) For span atttribute types, see Span Attribute Types . For span events, see Span events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Usage > Docker"},{"location":"usage/docker/#requirements-and-prequisites","text":"A running OpenTelemetry collector Docker","title":"Requirements and Prequisites"},{"location":"usage/docker/#basic-docker-usage","text":"docker run gardnera/tracepusher:v0.8.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS","title":"Basic Docker Usage"},{"location":"usage/docker/#optional-parameters","text":"--duration-type ms|s (defaults to `s` > seconds) --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) For span atttribute types, see Span Attribute Types . For span events, see Span events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Optional Parameters"},{"location":"usage/har-to-otel/","text":"Chrome DevTools HAR File to OpenTelemetry Converter This tool converts a .har file to OpenTelemetry traces and sends them to an OpenTelemetry collector using tracepusher. Download this tool from the tracepusher releases assets on GitHub . Prerequisites This tool requires either: A copy of the tracepusher binary >= v0.10.0 in the PATH A copy of tracepusher.py ( >= v0.10.0 ) in the same directory as har-to-otel If you can run ./tracepusher version and get a version >= 0.10.0 , you're good to proceed. Usage ./har-to-otel -f /path-to-file/YOUR-HAR-FILE.har -ep http://otel-collector-url:4318 --insecure true Optional flags If set, these are added as span attributes: --timings [true|false] (defaults to true ) --request-headers [true|false] (defaults to false ) --response-headers [true|false] (defaults to false ) --request-cookies [true|false] (defaults to false ) --response-cookies [true|false] (defaults to false ) --debug [true|false] (defaults to false ) --dry-run [true|false] (defaults to false ) --version (prints the har-to-otel version)","title":"Usage > DevTools HAR File to OpenTelemetry Converter"},{"location":"usage/har-to-otel/#chrome-devtools-har-file-to-opentelemetry-converter","text":"This tool converts a .har file to OpenTelemetry traces and sends them to an OpenTelemetry collector using tracepusher. Download this tool from the tracepusher releases assets on GitHub .","title":"Chrome DevTools HAR File to OpenTelemetry Converter"},{"location":"usage/har-to-otel/#prerequisites","text":"This tool requires either: A copy of the tracepusher binary >= v0.10.0 in the PATH A copy of tracepusher.py ( >= v0.10.0 ) in the same directory as har-to-otel If you can run ./tracepusher version and get a version >= 0.10.0 , you're good to proceed.","title":"Prerequisites"},{"location":"usage/har-to-otel/#usage","text":"./har-to-otel -f /path-to-file/YOUR-HAR-FILE.har -ep http://otel-collector-url:4318 --insecure true","title":"Usage"},{"location":"usage/har-to-otel/#optional-flags","text":"If set, these are added as span attributes: --timings [true|false] (defaults to true ) --request-headers [true|false] (defaults to false ) --response-headers [true|false] (defaults to false ) --request-cookies [true|false] (defaults to false ) --response-cookies [true|false] (defaults to false ) --debug [true|false] (defaults to false ) --dry-run [true|false] (defaults to false ) --version (prints the har-to-otel version)","title":"Optional flags"},{"location":"usage/helm/","text":"Trace Helm with Tracepusher It is possible to trace helm commands using tracepusher. Just add the word trace to any regular helm command. For example, helm version becomes helm trace version Instructions Download and add a tracepusher binary to your PATH Install helm trace plugin: helm plugin install https://github.com/agardnerit/helm-trace Full documentation is available on the helm trace GitHub repo .","title":"Trace Helm with Tracepusher"},{"location":"usage/helm/#trace-helm-with-tracepusher","text":"It is possible to trace helm commands using tracepusher. Just add the word trace to any regular helm command. For example, helm version becomes helm trace version","title":"Trace Helm with Tracepusher"},{"location":"usage/helm/#instructions","text":"Download and add a tracepusher binary to your PATH Install helm trace plugin: helm plugin install https://github.com/agardnerit/helm-trace Full documentation is available on the helm trace GitHub repo .","title":"Instructions"},{"location":"usage/k8sjobs/","text":"Trace Kubernetes Jobs and CronJobs with tracepusher Install the tracepusher job operator to automatically generate OpenTelemetry traces for any Job and CronJobs on the cluster. Prerequisites First, make sure you have an OpenTelemetry collector running somewhere. 1. Install Custom Resource Definitions Install the tracepusher CRDs: kubectl apply -f https://raw.githubusercontent.com/agardnerIT/tracepusher/main/operator/crds.yml 2. Create One (or more) JobTracer Objects A JobTracer should be created, one per namespace. This defines the defaults for that namespace. You can override the details on a per job basis. cat <<EOF | kubectl create -f - --- apiVersion: tracers.tracepusher.github.io/v1 kind: JobTracer metadata: name: tracer namespace: default spec: collectorEndpoint: \"http://your-collector.namespace.svc.cluster.local:4318\" EOF You can now kubectl get jobtracers . 3. Create a Job or CronJob Now create a Job or CronJob as normal: cat <<EOF | kubectl create -f - --- apiVersion: batch/v1 kind: Job metadata: name: pi namespace: default #annotations: # tracepusher/ignore: \"true\" # tracepusher/collector: \"http://example.com:4318\" spec: template: spec: containers: - name: pi image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"] restartPolicy: Never backoffLimit: 0 EOF Note the optional annotations. If set, these override the JobTracer settings. Example 2: A Multi Container Job tracepusher works with multi container jobs too: cat <<EOF | kubectl create -f - --- apiVersion: batch/v1 kind: Job metadata: name: pi-multicontainer namespace: default #annotations: # tracepusher/ignore: \"true\" # tracepusher/collector: \"http://example.com:4318\" spec: template: spec: containers: - name: first image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"] - name: second image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(1000)\"] restartPolicy: Never backoffLimit: 0 EOF","title":"Usage > Kubernetes Jobs and CronJobs"},{"location":"usage/k8sjobs/#trace-kubernetes-jobs-and-cronjobs-with-tracepusher","text":"Install the tracepusher job operator to automatically generate OpenTelemetry traces for any Job and CronJobs on the cluster.","title":"Trace Kubernetes Jobs and CronJobs with tracepusher"},{"location":"usage/k8sjobs/#prerequisites","text":"First, make sure you have an OpenTelemetry collector running somewhere.","title":"Prerequisites"},{"location":"usage/k8sjobs/#1-install-custom-resource-definitions","text":"Install the tracepusher CRDs: kubectl apply -f https://raw.githubusercontent.com/agardnerIT/tracepusher/main/operator/crds.yml","title":"1. Install Custom Resource Definitions"},{"location":"usage/k8sjobs/#2-create-one-or-more-jobtracer-objects","text":"A JobTracer should be created, one per namespace. This defines the defaults for that namespace. You can override the details on a per job basis. cat <<EOF | kubectl create -f - --- apiVersion: tracers.tracepusher.github.io/v1 kind: JobTracer metadata: name: tracer namespace: default spec: collectorEndpoint: \"http://your-collector.namespace.svc.cluster.local:4318\" EOF You can now kubectl get jobtracers .","title":"2. Create One (or more) JobTracer Objects"},{"location":"usage/k8sjobs/#3-create-a-job-or-cronjob","text":"Now create a Job or CronJob as normal: cat <<EOF | kubectl create -f - --- apiVersion: batch/v1 kind: Job metadata: name: pi namespace: default #annotations: # tracepusher/ignore: \"true\" # tracepusher/collector: \"http://example.com:4318\" spec: template: spec: containers: - name: pi image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"] restartPolicy: Never backoffLimit: 0 EOF Note the optional annotations. If set, these override the JobTracer settings.","title":"3. Create a Job or CronJob"},{"location":"usage/k8sjobs/#example-2-a-multi-container-job","text":"tracepusher works with multi container jobs too: cat <<EOF | kubectl create -f - --- apiVersion: batch/v1 kind: Job metadata: name: pi-multicontainer namespace: default #annotations: # tracepusher/ignore: \"true\" # tracepusher/collector: \"http://example.com:4318\" spec: template: spec: containers: - name: first image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"] - name: second image: perl:5.34.0 command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(1000)\"] restartPolicy: Never backoffLimit: 0 EOF","title":"Example 2: A Multi Container Job"},{"location":"usage/python/","text":"Requirements and Prequisites A running OpenTelemetry collector Python + Requests module Basic Python Usage python3 tracepusher.py -h or python3 tracepusher.py --help shows help text. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name spanA \\ --duration 2 Optional Parameters --duration-type ms|s (defaults to `s` > seconds) --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value [key2=value2...] --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) For information on span atttributes and span attribute types, see Span Attribute Types . For information on span events, see Span Events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Usage > Python"},{"location":"usage/python/#requirements-and-prequisites","text":"A running OpenTelemetry collector Python + Requests module","title":"Requirements and Prequisites"},{"location":"usage/python/#basic-python-usage","text":"python3 tracepusher.py -h or python3 tracepusher.py --help shows help text. python tracepusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --service-name service_name \\ --span-name spanA \\ --duration 2","title":"Basic Python Usage"},{"location":"usage/python/#optional-parameters","text":"--duration-type ms|s (defaults to `s` > seconds) --dry-run True|False --debug True|False --time-shift True|False --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value [key2=value2...] --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) For information on span atttributes and span attribute types, see Span Attribute Types . For information on span events, see Span Events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Optional Parameters"},{"location":"usage/standalone/","text":"Download binary Download the relevant binary from the GitHub releases page . Run tracepusher ./tracepusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --insecure false \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS Optional Parameters --dry-run True|False --debug True|False --time-shift True|False --duration-type ms|s (defaults to `s` > seconds) --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) --span-status OK|ERROR (defaults to OK) For span atttribute types, see Span Attribute Types . For span events, see Span events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Usage > Standalone Binary"},{"location":"usage/standalone/#download-binary","text":"Download the relevant binary from the GitHub releases page .","title":"Download binary"},{"location":"usage/standalone/#run-tracepusher","text":"./tracepusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --insecure false \\ -sen service_name \\ -spn span_name \\ -dur SPAN_TIME_IN_SECONDS","title":"Run tracepusher"},{"location":"usage/standalone/#optional-parameters","text":"--dry-run True|False --debug True|False --time-shift True|False --duration-type ms|s (defaults to `s` > seconds) --parent-span-id <16 character hex id> --trace-id <32 character hex id> --span-id <16 character hex id> --span-attributes key=value key2=value2=type --span-events timeOffsetInMillis=EventName=AttributeKey=AttributeValue=type [event2...] [event3...] --span-kind UNSPECIFIED|INTERNAL|CLIENT|SERVER|CONSUMER|PRODUCER (defaults to `INTERNAL`) --span-status OK|ERROR (defaults to OK) For span atttribute types, see Span Attribute Types . For span events, see Span events For multi-span traces, see multi span traces For duration type, see duration type For span kind, see span kind","title":"Optional Parameters"}]}